package main

import (
	"fmt"

	"github.com/TomasCruz/projecteuler"
	"gonum.org/v1/gonum/mat"
)

/*
Even Fibonacci numbers
Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
*/

func main() {
	projecteuler.Timed(calc, int64(4000000))
}

func calc(args ...interface{}) {
	var limit int64

	if len(args) == 0 {
		limit = 4000000
	} else {
		limit = args[0].(int64)
	}

	var sum, currFib int64
	var currMatrix mat.Dense

	prevMatrix := *mat.NewDense(2, 2, []float64{1, 0, 0, 1})
	stepThreeMatrix := mat.NewDense(2, 2, []float64{3, 2, 2, 1})

	for {
		currMatrix.Mul(&prevMatrix, stepThreeMatrix)
		currFib = int64(currMatrix.At(0, 1))
		if currFib > limit {
			break
		}

		sum += currFib
		prevMatrix.Copy(&currMatrix)
		//fmt.Printf("c = %v\n", mat.Formatted(&currMatrix, mat.Prefix("    "), mat.Squeeze()))
	}

	fmt.Println(sum)
}
