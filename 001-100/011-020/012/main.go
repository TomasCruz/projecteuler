package main

import (
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/TomasCruz/projecteuler"
)

/*
Problem 12; Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

func main() {
	var limit int

	if len(os.Args) > 1 {
		limit64, err := strconv.ParseInt(os.Args[1], 10, 64)
		if err != nil {
			log.Fatal("bad argument")
		}

		limit = int(limit64)
	} else {
		limit = 500
	}

	projecteuler.Timed(calc, limit)
}

func calc(args ...interface{}) (err error) {
	limit := args[0].(int)

	primes := projecteuler.Primes(100000, nil)
	prevOddDivisors := 1
	i := 2

	for {
		// starting with odd i-1, calculate numDivisors for even i
		evenDivisors := numDivisors(i/2, primes)
		if evenDivisors == 0 {
			break
		}

		totalDivisors := prevOddDivisors * evenDivisors
		if totalDivisors > limit {
			fmt.Println((i - 1) * i / 2)
			break
		}

		// next odd is i+1
		nextOddDivisors := numDivisors(i+1, primes)
		totalDivisors = evenDivisors * nextOddDivisors
		if totalDivisors > limit {
			fmt.Println(i * (i + 1) / 2)
			break
		}

		prevOddDivisors = nextOddDivisors
		i += 2
	}

	return
}

func numDivisors(num int, primes []int) int {
	var factors []projecteuler.Powered
	var err error

	if factors, err = projecteuler.Factorize(num, primes); err != nil {
		fmt.Println(err)
		return 0
	}

	result := 1
	for _, pow := range factors {
		result *= pow.Exp + 1
	}

	return result
}
